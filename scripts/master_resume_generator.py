import os
import json
import importlib.util
from docx import Document
from docxcompose.composer import Composer

def generate_full_resume(output_dir):
    """
    Generate a full resume by combining individual sections.
    This assumes that each section is generated by a separate module and saved as a .docx file.

    Args:
        output_dir (str): The directory where the sections and final resume will be saved.
    """

    # Load the resume data from resume.json (located in the 'resume_project' folder)
    resume_data = load_resume_data()

    if not resume_data:
        print("Error: Could not load resume data.")
        return

    # Define the sections and their corresponding filenames
    sections = {
        "personal_info": "personal_info_section.docx",
        "summary": "summary_section.docx",
        "skills": "skills_section.docx",
        "experience": "experience_section.docx",
        "education": "education_section.docx",
        "key_achievements": "key_achievements_section.docx",
        "projects": "projects_section.docx"
    }

    # Ensure the output directory exists
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    # Generate each section by calling the appropriate function from the respective module
    for section, filename in sections.items():
        section_path = os.path.join(output_dir, filename)
        generate_section(section, section_path)

    # Combine all sections using docxcompose
    master = Document(os.path.join(output_dir, sections["personal_info"]))  # First section
    composer = Composer(master)

    # Add remaining sections in order
    for filename in list(sections.values())[1:]:
        doc = Document(os.path.join(output_dir, filename))
        composer.append(doc)

    # Save the final resume
    final_resume_filename = "final_resume.docx"
    final_resume_path = os.path.join(output_dir, final_resume_filename)
    composer.save(final_resume_path)
    print(f"Final resume generated at: {final_resume_path}")


def generate_section(section, section_path):
    """
    Generate a specific section of the resume by dynamically calling the relevant module.
    Assumes that the section modules are located in the 'sections' folder within the 'scripts' directory.
    """
    # Get the absolute path to the 'scripts' folder where the modules are located
    script_dir = os.path.dirname(os.path.realpath(__file__))  # This ensures it's the directory of the currently running script

    # Get the path to the section's Python file (e.g., 'personal_info.py')
    section_module_name = section  # Module name should match the section name directly, i.e., 'personal_info'
    section_module_path = os.path.join(script_dir, 'sections', f"{section_module_name}.py")

    # Check if the section module exists
    if not os.path.exists(section_module_path):
        print(f"Error: Module {section_module_name} not found at {section_module_path}.")
        return

    # Dynamically import the section module using importlib
    spec = importlib.util.spec_from_file_location(section_module_name, section_module_path)
    section_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(section_module)

    # Call the section function (e.g., generate_personal_info_section())
    section_function = getattr(section_module, f"generate_{section}_section")
    section_function(section_path)


def load_resume_data():
    """
    Load the resume data from the JSON file in the resume_project folder.
    """
    # Define the path to the JSON file
    script_dir = os.path.dirname(os.path.realpath(__file__))
    json_file_path = os.path.join(script_dir, '..', '..', 'resume_project', 'resume.json')

    # Check if the file exists
    if not os.path.exists(json_file_path):
        print(f"Error: The resume.json file was not found at {json_file_path}.")
        return None

    # Load the data from the JSON file
    with open(json_file_path, 'r') as f:
        resume_data = json.load(f)

    return resume_data


if __name__ == "__main__":
    # Get the absolute path of the script's directory
    script_dir = os.path.dirname(os.path.realpath(__file__))

    # Calculate the output directory path relative to the script's location
    output_dir = os.path.join(script_dir, '..', 'output')

    # Ensure the output directory exists
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    # Generate the full resume
    generate_full_resume(output_dir)

